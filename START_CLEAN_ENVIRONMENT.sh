#!/bin/bash

# =============================================================================
# DIREITO LUX - START CLEAN ENVIRONMENT
# =============================================================================
# Script completo para limpar cache, derrubar servi√ßos e subir ambiente limpo
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rio base
BASE_DIR="$(cd "$(dirname "$0")" && pwd)"
cd "$BASE_DIR"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}üöÄ DIREITO LUX - CLEAN START${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# =============================================================================
# 1. PARAR TODOS OS SERVI√áOS
# =============================================================================
echo -e "${YELLOW}üìã Parando todos os servi√ßos...${NC}"

# Parar Docker Compose (ignora erro se n√£o estiver rodando)
docker-compose down -v --remove-orphans 2>/dev/null || true
docker-compose -f docker-compose.simple.yml down -v --remove-orphans 2>/dev/null || true
docker-compose -f services/docker-compose.dev.yml down -v --remove-orphans 2>/dev/null || true

# Parar containers √≥rf√£os
echo -e "${YELLOW}üîç Procurando containers √≥rf√£os...${NC}"
ORPHAN_CONTAINERS=$(docker ps -a -q --filter "label=com.docker.compose.project=direito-lux" 2>/dev/null || true)
if [ ! -z "$ORPHAN_CONTAINERS" ]; then
    echo -e "${YELLOW}Removendo containers √≥rf√£os...${NC}"
    docker rm -f $ORPHAN_CONTAINERS 2>/dev/null || true
fi

# =============================================================================
# 2. LIMPAR CACHE E VOLUMES
# =============================================================================
echo -e "${YELLOW}üßπ Limpando cache e volumes...${NC}"

# Remover redes antigas do projeto
echo -e "${YELLOW}Removendo redes antigas...${NC}"
docker network ls -q --filter name=direito | xargs -r docker network rm 2>/dev/null || true

# Remover volumes espec√≠ficos do projeto
echo -e "${YELLOW}Removendo volumes antigos...${NC}"
docker volume ls -q | grep -E "direito-lux|direito_lux" | xargs -r docker volume rm 2>/dev/null || true

# Limpar cache de build
echo -e "${YELLOW}Limpando cache de build...${NC}"
docker builder prune -f 2>/dev/null || true

# Limpar imagens n√£o utilizadas
echo -e "${YELLOW}Limpando imagens n√£o utilizadas...${NC}"
docker image prune -f 2>/dev/null || true

# Limpar sistema (mant√©m imagens base para economizar tempo)
echo -e "${YELLOW}Limpeza final do sistema...${NC}"
docker system prune -f --volumes 2>/dev/null || true

# Limpar logs locais
echo -e "${YELLOW}üìÑ Limpando logs...${NC}"
rm -rf logs/*.log 2>/dev/null || true
find services -name "*.log" -type f -delete 2>/dev/null || true

# Limpar bin√°rios compilados
echo -e "${YELLOW}üóëÔ∏è Limpando bin√°rios...${NC}"
find services -name "main" -type f -delete 2>/dev/null || true
find services -name "server" -type f -delete 2>/dev/null || true
find services -name "*-service" -type f -delete 2>/dev/null || true

# =============================================================================
# 3. VERIFICAR PORTAS
# =============================================================================
echo -e "${YELLOW}üîç Verificando portas...${NC}"

check_port() {
    local port=$1
    local service=$2
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${RED}‚ö†Ô∏è  Porta $port ($service) est√° em uso!${NC}"
        echo -e "${YELLOW}   Matando processo na porta $port...${NC}"
        lsof -ti:$port | xargs kill -9 2>/dev/null || true
        sleep 1
    fi
}

# Verificar principais portas
check_port 5432 "PostgreSQL"
check_port 6379 "Redis"
check_port 15672 "RabbitMQ Management"
check_port 5672 "RabbitMQ"
check_port 9200 "Elasticsearch"
check_port 3000 "Frontend"
check_port 8000 "AI Service"
check_port 8080 "API Gateway"
check_port 8081 "Auth Service"
check_port 8082 "Tenant Service"
check_port 8083 "Process Service"
check_port 8084 "DataJud Service"
check_port 8085 "Notification Service"
check_port 8086 "Search Service"
check_port 8087 "Report Service"
check_port 8088 "MCP Service"

echo -e "${GREEN}‚úÖ Portas liberadas${NC}"

# =============================================================================
# 4. CRIAR REDE DOCKER
# =============================================================================
echo -e "${YELLOW}üåê Configurando rede Docker...${NC}"

# Remover rede antiga se existir
docker network rm direito-lux-network 2>/dev/null || true

# Aguardar um pouco
sleep 1

# Criar nova rede
if docker network create direito-lux-network 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Rede direito-lux-network criada${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Usando rede existente${NC}"
fi

# =============================================================================
# 5. SUBIR INFRAESTRUTURA BASE
# =============================================================================
echo -e "${BLUE}üèóÔ∏è Subindo infraestrutura base...${NC}"

# Usar docker-compose simplificado sem builds
COMPOSE_FILE="docker-compose.simple.yml"

# Subir apenas servi√ßos essenciais primeiro
docker-compose -f $COMPOSE_FILE up -d postgres redis rabbitmq

# Aguardar PostgreSQL estar pronto
echo -e "${YELLOW}‚è≥ Aguardando PostgreSQL...${NC}"
until docker-compose -f $COMPOSE_FILE exec -T postgres pg_isready -U postgres 2>/dev/null; do
    echo -n "."
    sleep 2
done
echo -e "\n${GREEN}‚úÖ PostgreSQL pronto${NC}"

# Aguardar Redis (usando healthcheck)
echo -e "${YELLOW}‚è≥ Aguardando Redis...${NC}"
REDIS_TIMEOUT=60
REDIS_COUNT=0

# Primeiro tenta usar o healthcheck do Docker
while [ "$(docker inspect --format='{{.State.Health.Status}}' direito-lux-redis 2>/dev/null)" != "healthy" ]; do
    echo -n "."
    sleep 2
    REDIS_COUNT=$((REDIS_COUNT + 2))
    
    if [ $REDIS_COUNT -ge $REDIS_TIMEOUT ]; then
        echo -e "\n${YELLOW}Healthcheck timeout, tentando conex√£o direta...${NC}"
        
        # Tenta conex√£o direta como fallback
        if docker-compose exec -T redis redis-cli --no-auth-warning -a dev_redis_123 ping 2>/dev/null | grep -q PONG; then
            echo -e "${GREEN}‚úÖ Redis conectado (conex√£o direta)${NC}"
            break
        else
            echo -e "\n${RED}‚ùå Redis n√£o respondeu ap√≥s ${REDIS_TIMEOUT}s${NC}"
            echo -e "${YELLOW}Logs do Redis:${NC}"
            docker-compose logs --tail=5 redis
            echo -e "${YELLOW}Status do container:${NC}"
            docker inspect --format='{{.State.Status}} - {{.State.Health.Status}}' direito-lux-redis
        fi
        break
    fi
done

if [ $REDIS_COUNT -lt $REDIS_TIMEOUT ]; then
    echo -e "\n${GREEN}‚úÖ Redis pronto${NC}"
fi

# Aguardar RabbitMQ (usando healthcheck)
echo -e "${YELLOW}‚è≥ Aguardando RabbitMQ...${NC}"
RABBITMQ_TIMEOUT=120  # RabbitMQ demora mais para iniciar
RABBITMQ_COUNT=0

# Primeiro tenta usar o healthcheck do Docker
while [ "$(docker inspect --format='{{.State.Health.Status}}' direito-lux-rabbitmq 2>/dev/null)" != "healthy" ]; do
    echo -n "."
    sleep 3
    RABBITMQ_COUNT=$((RABBITMQ_COUNT + 3))
    
    if [ $RABBITMQ_COUNT -ge $RABBITMQ_TIMEOUT ]; then
        echo -e "\n${YELLOW}Healthcheck timeout, tentando verifica√ß√£o direta...${NC}"
        
        # Tenta verifica√ß√£o direta como fallback
        if docker-compose exec -T rabbitmq rabbitmqctl status 2>/dev/null | grep -q "Running"; then
            echo -e "${GREEN}‚úÖ RabbitMQ conectado (verifica√ß√£o direta)${NC}"
            break
        elif docker-compose exec -T rabbitmq rabbitmq-diagnostics ping 2>/dev/null | grep -q "Ping succeeded"; then
            echo -e "${GREEN}‚úÖ RabbitMQ conectado (ping)${NC}"
            break
        else
            echo -e "\n${RED}‚ùå RabbitMQ n√£o respondeu ap√≥s ${RABBITMQ_TIMEOUT}s${NC}"
            echo -e "${YELLOW}Logs do RabbitMQ:${NC}"
            docker-compose logs --tail=10 rabbitmq
            echo -e "${YELLOW}Status do container:${NC}"
            docker inspect --format='{{.State.Status}} - {{.State.Health.Status}}' direito-lux-rabbitmq
            echo -e "${YELLOW}Tentando continuar mesmo assim...${NC}"
        fi
        break
    fi
done

if [ $RABBITMQ_COUNT -lt $RABBITMQ_TIMEOUT ]; then
    echo -e "\n${GREEN}‚úÖ RabbitMQ pronto${NC}"
fi

# =============================================================================
# 6. EXECUTAR SETUP MASTER
# =============================================================================
echo -e "${BLUE}üîß Executando setup master...${NC}"

if [ -f "./SETUP_MASTER_ONBOARDING.sh" ]; then
    chmod +x ./SETUP_MASTER_ONBOARDING.sh
    ./SETUP_MASTER_ONBOARDING.sh
else
    echo -e "${RED}‚ùå SETUP_MASTER_ONBOARDING.sh n√£o encontrado!${NC}"
    echo -e "${YELLOW}Executando setup b√°sico...${NC}"
    
    # Setup b√°sico se o master n√£o existir
    docker-compose exec -T postgres psql -U postgres <<EOF
CREATE USER direito_lux WITH PASSWORD 'direito_lux_pass_dev';
CREATE DATABASE direito_lux_dev OWNER direito_lux;
GRANT ALL PRIVILEGES ON DATABASE direito_lux_dev TO direito_lux;
EOF
fi

# =============================================================================
# 7. SUBIR SERVI√áOS DE APOIO
# =============================================================================
echo -e "${BLUE}üöÄ Subindo servi√ßos de apoio...${NC}"

# Subir resto da infraestrutura (pgAdmin, Mailhog)
docker-compose -f $COMPOSE_FILE up -d

# Aguardar servi√ßos de apoio
echo -e "${YELLOW}‚è≥ Aguardando servi√ßos de apoio...${NC}"
sleep 5

# =============================================================================
# 8. VERIFICAR SA√öDE DA INFRAESTRUTURA
# =============================================================================
echo -e "${BLUE}üè• Verificando sa√∫de da infraestrutura...${NC}"

# Verificar PostgreSQL
echo -n "PostgreSQL: "
if docker-compose -f $COMPOSE_FILE exec -T postgres pg_isready -U postgres 2>/dev/null | grep -q "accepting connections"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FALHOU${NC}"
fi

# Verificar Redis
echo -n "Redis: "
if docker-compose -f $COMPOSE_FILE exec -T redis redis-cli --no-auth-warning -a dev_redis_123 ping 2>/dev/null | grep -q PONG; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FALHOU${NC}"
fi

# Verificar RabbitMQ
echo -n "RabbitMQ: "
if docker-compose -f $COMPOSE_FILE exec -T rabbitmq rabbitmq-diagnostics ping 2>/dev/null | grep -q "Ping succeeded"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FALHOU${NC}"
fi

# Verificar pgAdmin
echo -n "pgAdmin: "
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:5050" | grep -q "200\|302"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pode demorar um pouco${NC}"
fi

# Verificar Mailhog
echo -n "Mailhog: "
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8025" | grep -q "200"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  N√£o cr√≠tico${NC}"
fi

# =============================================================================
# 9. INICIAR FRONTEND (OPCIONAL)
# =============================================================================
echo -e "${BLUE}üíª Frontend...${NC}"
echo -e "${YELLOW}Para iniciar o frontend, execute em outro terminal:${NC}"
echo -e "${GREEN}cd frontend && npm install && npm run dev${NC}"

# =============================================================================
# 10. RESUMO FINAL
# =============================================================================
echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${GREEN}‚úÖ AMBIENTE INICIADO COM SUCESSO!${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${BLUE}üìä Infraestrutura Dispon√≠vel:${NC}"
echo -e "  PostgreSQL:       ${GREEN}localhost:5432${NC}"
echo -e "  Redis:            ${GREEN}localhost:6379${NC}"
echo -e "  RabbitMQ:         ${GREEN}http://localhost:15672${NC}"
echo -e "  pgAdmin:          ${GREEN}http://localhost:5050${NC}"
echo -e "  Mailhog:          ${GREEN}http://localhost:8025${NC}"
echo ""
echo -e "${BLUE}üîê Credenciais:${NC}"
echo -e "  PostgreSQL:       ${GREEN}direito_lux / direito_lux_pass_dev${NC}"
echo -e "  Redis:            ${GREEN}dev_redis_123${NC}"
echo -e "  RabbitMQ:         ${GREEN}direito_lux / dev_rabbit_123${NC}"
echo -e "  pgAdmin:          ${GREEN}admin@direitolux.com / dev_pgadmin_123${NC}"
echo ""
echo -e "${BLUE}üõ†Ô∏è Comandos √öteis:${NC}"
echo -e "  Ver logs:         ${YELLOW}docker-compose -f docker-compose.simple.yml logs -f [servi√ßo]${NC}"
echo -e "  Parar tudo:       ${YELLOW}docker-compose -f docker-compose.simple.yml down${NC}"
echo -e "  Limpar tudo:      ${YELLOW}docker-compose -f docker-compose.simple.yml down -v${NC}"
echo -e "  Status:           ${YELLOW}docker-compose -f docker-compose.simple.yml ps${NC}"
echo ""
echo -e "${BLUE}üöÄ Para subir os microservi√ßos:${NC}"
echo -e "  1. Crie/corrija os Dockerfile.dev que faltam"
echo -e "  2. Use: ${GREEN}docker-compose up -d${NC}"
echo -e "  3. Ou execute servi√ßos individualmente com ${GREEN}go run${NC}"
echo ""
echo -e "${GREEN}üéâ Infraestrutura b√°sica pronta!${NC}"