version: '3.8'

services:
  # Core Infrastructure
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: direito_lux_dev
      POSTGRES_USER: direito_lux
      POSTGRES_PASSWORD: direito_lux_pass_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-EXEC", "pg_isready -U direito_lux -d direito_lux_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - direito-lux-dev

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis_pass_dev
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - direito-lux-dev

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: direito_lux
      RABBITMQ_DEFAULT_PASS: rabbit_pass_dev
      RABBITMQ_DEFAULT_VHOST: direito_lux
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - direito-lux-dev

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - direito-lux-dev

  # Monitoring
  jaeger:
    image: jaegertracing/all-in-one:1.51
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "14268:14268"
      - "16686:16686"
    command: [
      "--memory.max-traces=10000",
      "--query.base-path=/jaeger/ui"
    ]
    networks:
      - direito-lux-dev

  # AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
    environment:
      # Service Config
      SERVICE_NAME: ai-service
      VERSION: 1.0.0
      ENVIRONMENT: development
      PORT: 8000
      LOG_LEVEL: debug

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: direito_lux_dev
      DB_USER: direito_lux
      DB_PASSWORD: direito_lux_pass_dev

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_pass_dev
      REDIS_DB: 1

      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: direito_lux
      RABBITMQ_PASSWORD: rabbit_pass_dev
      RABBITMQ_VHOST: direito_lux

      # OpenAI (use placeholder for dev)
      OPENAI_API_KEY: sk-openai-test-key-placeholder
      OPENAI_MODEL: gpt-3.5-turbo
      OPENAI_MAX_TOKENS: 2000

      # HuggingFace (optional)
      HUGGINGFACE_TOKEN: ""

      # Vector Store
      VECTOR_STORE_TYPE: chroma
      VECTOR_STORE_PATH: /app/data/vectors

      # Cache
      CACHE_TTL: 3600
      CACHE_MAX_SIZE: 1000
    ports:
      - "8000:8000"
    volumes:
      - ./ai-service:/app
      - ai_service_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - direito-lux-dev

  # Search Service
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile.dev
    environment:
      # Service Config
      SERVICE_NAME: search-service
      VERSION: 1.0.0
      ENVIRONMENT: development
      PORT: 8086
      LOG_LEVEL: debug

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: direito_lux_dev
      DB_USER: direito_lux
      DB_PASSWORD: direito_lux_pass_dev

      # Elasticsearch
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_INDEX: direito_lux_search
      ELASTICSEARCH_TIMEOUT: 30s

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_pass_dev
      REDIS_DB: 2

      # RabbitMQ
      RABBITMQ_URL: amqp://direito_lux:rabbit_pass_dev@rabbitmq:5672/direito_lux
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: direito_lux
      RABBITMQ_PASSWORD: rabbit_pass_dev
      RABBITMQ_VHOST: direito_lux

      # JWT
      JWT_SECRET: dev-jwt-secret-key

      # Search Config
      SEARCH_MAX_RESULTS: 100
      SEARCH_DEFAULT_PAGE_SIZE: 20
      SEARCH_TIMEOUT: 30s
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - direito-lux-dev

  # MCP Service (separate network but can communicate)
  mcp-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: direito_lux_mcp
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_pass_dev
    ports:
      - "5434:5432"
    volumes:
      - mcp_postgres_data:/var/lib/postgresql/data
      - ./mcp-service/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-EXEC", "pg_isready -U mcp_user -d direito_lux_mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - direito-lux-dev

  mcp-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --requirepass redis_pass_dev
    volumes:
      - mcp_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - direito-lux-dev

  mcp-rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: mcp_user
      RABBITMQ_DEFAULT_PASS: rabbit_pass_dev
      RABBITMQ_DEFAULT_VHOST: mcp_vhost
    ports:
      - "5673:5672"
      - "15673:15672"
    volumes:
      - mcp_rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - direito-lux-dev

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  ai_service_data:
  mcp_postgres_data:
  mcp_redis_data:
  mcp_rabbitmq_data:

networks:
  direito-lux-dev:
    driver: bridge