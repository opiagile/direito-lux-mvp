version: '3.8'

services:
  # =============================================================================
  # INFRAESTRUTURA BASE
  # =============================================================================
  
  # PostgreSQL - Banco principal
  postgres:
    image: postgres:15
    container_name: direito-lux-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U direito_lux -d direito_lux_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - direito-lux-network

  # Redis - Cache e sessões
  redis:
    image: redis:7-alpine
    container_name: direito-lux-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass dev_redis_123
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "dev_redis_123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - direito-lux-network

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: direito-lux-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: direito_lux
      RABBITMQ_DEFAULT_PASS: dev_rabbit_123
      RABBITMQ_DEFAULT_VHOST: direito_lux
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      # Configurações customizadas comentadas temporariamente
      # - ./infrastructure/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      # - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - direito-lux-network

  # Keycloak - Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: direito-lux-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: dev_admin_123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/direito_lux_dev
      KC_DB_USERNAME: direito_lux
      KC_DB_PASSWORD: dev_password_123
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
    ports:
      - "8080:8080"
    command: start-dev
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./infrastructure/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - direito-lux-network

  # =============================================================================
  # OBSERVABILIDADE
  # =============================================================================

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: direito-lux-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # UI
      - "14268:14268" # HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - direito-lux-network

  # Prometheus - Metrics
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: direito-lux-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - direito-lux-network

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:10.2.3
    container_name: direito-lux-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_grafana_123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - direito-lux-network

  # =============================================================================
  # MICROSERVIÇOS DIREITO LUX
  # =============================================================================

  # API Gateway (Kong)
  kong:
    image: kong/kong-gateway:3.5.0.0
    container_name: direito-lux-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000" # Proxy
      - "8001:8001" # Admin API  
      - "8002:8002" # Admin GUI
    volumes:
      - ./infrastructure/kong/kong.yml:/kong/declarative/kong.yml
    networks:
      - direito-lux-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-auth
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=direito-lux
      - KEYCLOAK_CLIENT_ID=direito-lux-client
      - KEYCLOAK_CLIENT_SECRET=dev_keycloak_client_secret_123
      - KEYCLOAK_ENABLED=false
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - JWT_SECRET=dev_jwt_secret_direito_lux_2024_super_secure_key_123
      - LOG_LEVEL=debug
      - PORT=8080
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_started
    volumes:
      - ./services/auth-service:/app
    networks:
      - direito-lux-network
    restart: unless-stopped

  # Tenant Service
  tenant-service:
    build:
      context: ./services/tenant-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-tenant
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - AUTH_SERVICE_URL=http://auth-service:8080
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=debug
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./services/tenant-service:/app
    networks:
      - direito-lux-network
    restart: unless-stopped

  # Process Service
  process-service:
    build:
      context: ./services/process-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-process
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - AUTH_SERVICE_URL=http://auth-service:8080
      - TENANT_SERVICE_URL=http://tenant-service:8080
      - DATAJUD_SERVICE_URL=http://datajud-service:8080
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=debug
      - PORT=8080
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
      tenant-service:
        condition: service_started
    volumes:
      - ./services/process-service:/app
      - /app/vendor
    networks:
      - direito-lux-network
    restart: unless-stopped

  # DataJud Service
  datajud-service:
    build:
      context: ./services/datajud-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-datajud
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - DATAJUD_API_URL=https://api-publica.datajud.cnj.jus.br
      - DATAJUD_API_KEY=${DATAJUD_API_KEY:-demo_key}
      - RATE_LIMIT_DAILY=10000
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=debug
      - PORT=8080
    ports:
      - "8084:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/datajud-service:/app
      - /app/vendor
    networks:
      - direito-lux-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-notification
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - SMTP_HOST=${SMTP_HOST:-localhost}
      - SMTP_PORT=${SMTP_PORT:-1025}
      - SMTP_USERNAME=${SMTP_USERNAME:-dev@direitolux.com}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-demo_password}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@direitolux.com}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME:-Direito Lux}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN:-demo_token}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID:-123456789}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN:-demo_verify_token}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=debug
    ports:
      - "8085:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/notification-service:/app
      - /app/vendor
    networks:
      - direito-lux-network
    restart: unless-stopped

  # AI Service (Python)
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-ai
    environment:
      - PORT=8000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - OPENAI_API_KEY=${OPENAI_API_KEY:-demo_key}
      - OPENAI_MODEL=gpt-3.5-turbo
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN:-demo_token}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=debug
    ports:
      - "8087:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/ai-service:/app
      - ai_models:/app/models
    networks:
      - direito-lux-network
    restart: unless-stopped

  # Elasticsearch - Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: direito-lux-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - direito-lux-network

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile.dev
    container_name: direito-lux-search
    environment:
      - PORT=8086
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=direito_lux_dev
      - DB_USER=direito_lux
      - DB_PASSWORD=dev_password_123
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=direito_lux
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev_redis_123
      - RABBITMQ_URL=amqp://direito_lux:dev_rabbit_123@rabbitmq:5672/direito_lux
      - AUTH_SERVICE_URL=http://auth-service:8080
      - TENANT_SERVICE_URL=http://tenant-service:8080
      - PROCESS_SERVICE_URL=http://process-service:8080
      - AI_SERVICE_URL=http://ai-service:8000
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=debug
      - PORT=8080
      - MAX_SEARCH_RESULTS=100
      - DEFAULT_PAGE_SIZE=20
      - SEARCH_CACHE_TTL=5m
      - INDEX_BATCH_SIZE=1000
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
      tenant-service:
        condition: service_started
    volumes:
      - ./services/search-service:/app
      - /app/vendor
    networks:
      - direito-lux-network
    restart: unless-stopped

  # =============================================================================
  # DESENVOLVIMENTO E UTILIDADES
  # =============================================================================

  # pgAdmin - Database Management
  pgadmin:
    image: dpage/pgadmin4:8.1
    container_name: direito-lux-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@direitolux.com
      PGADMIN_DEFAULT_PASSWORD: dev_pgadmin_123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./infrastructure/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - direito-lux-network

  # Redis Commander - Redis Management (ARM64 compatible)
  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/amd64
    container_name: direito-lux-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev_redis_123
      HTTP_USER: admin
      HTTP_PASSWORD: dev_redis_ui_123
    ports:
      - "8091:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - direito-lux-network

  # Mailhog - Email Testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    platform: linux/amd64
    container_name: direito-lux-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - direito-lux-network

  # Mock WhatsApp API for development
  whatsapp-mock:
    image: wiremock/wiremock:3.3.1
    container_name: direito-lux-whatsapp-mock
    ports:
      - "9000:8080"
    volumes:
      - ./infrastructure/mocks/whatsapp:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - direito-lux-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:
  elasticsearch_data:
  ai_models:

networks:
  direito-lux-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16