name: 📦 Dependency Management

on:
  schedule:
    # Run dependency updates every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

jobs:
  # Update Go Dependencies
  update-go-dependencies:
    name: 🔄 Update Go Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          auth-service,
          tenant-service,
          process-service,
          notification-service,
          search-service,
          report-service,
          mcp-service,
          datajud-service
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: services/${{ matrix.service }}/go.sum
      
      - name: Update Go dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f "go.mod" ]; then
            echo "Updating dependencies for ${{ matrix.service }}"
            
            # Get current dependencies
            go list -m -u all > current_deps.txt
            
            # Update based on input type
            case "${{ github.event.inputs.update_type || 'patch' }}" in
              "patch")
                # Update patch versions only
                go get -u=patch ./...
                ;;
              "minor")
                # Update minor versions
                go get -u ./...
                ;;
              "major"|"all")
                # Update all versions (including major)
                go get -u ./...
                ;;
            esac
            
            # Clean up
            go mod tidy
            
            # Check if there are changes
            if ! git diff --quiet go.mod go.sum; then
              echo "Dependencies updated for ${{ matrix.service }}"
              echo "HAS_CHANGES=true" >> $GITHUB_ENV
            else
              echo "No dependency updates needed for ${{ matrix.service }}"
              echo "HAS_CHANGES=false" >> $GITHUB_ENV
            fi
          fi
      
      - name: Run tests after dependency update
        if: env.HAS_CHANGES == 'true'
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f "go.mod" ]; then
            go test ./... -v
          fi
      
      - name: Create Pull Request for Go dependencies
        if: env.HAS_CHANGES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(${{ matrix.service }}): update Go dependencies
            
            - Update Go dependencies for ${{ matrix.service }}
            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
            - All tests passing
          title: "chore(${{ matrix.service }}): update Go dependencies"
          body: |
            ## 📦 Dependency Update - ${{ matrix.service }}
            
            This PR updates Go dependencies for the **${{ matrix.service }}** service.
            
            ### Changes
            - **Update Type**: ${{ github.event.inputs.update_type || 'patch' }}
            - **Service**: ${{ matrix.service }}
            - **Tests**: ✅ All tests passing
            
            ### Generated Files
            - `go.mod` - Updated dependency versions
            - `go.sum` - Updated dependency checksums
            
            ### Review Checklist
            - [ ] Check for breaking changes in updated dependencies
            - [ ] Verify all tests are passing
            - [ ] Review security advisories for updated packages
            
            ---
            🤖 This PR was automatically generated by the dependency update workflow.
          branch: deps/go-${{ matrix.service }}-${{ github.run_number }}
          base: develop
          labels: |
            dependencies
            go
            ${{ matrix.service }}
            automated
          reviewers: |
            ${{ github.repository_owner }}

  # Update Python Dependencies (AI Service)
  update-python-dependencies:
    name: 🐍 Update Python Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: services/ai-service/requirements.txt
      
      - name: Install pip-tools
        run: pip install pip-tools
      
      - name: Update Python dependencies
        working-directory: services/ai-service
        run: |
          # Create requirements.in if it doesn't exist
          if [ ! -f "requirements.in" ]; then
            cp requirements.txt requirements.in
          fi
          
          # Update dependencies based on input type
          case "${{ github.event.inputs.update_type || 'patch' }}" in
            "patch")
              # Update to latest patch versions
              pip-compile --upgrade --upgrade-package="*" requirements.in
              ;;
            "minor"|"major"|"all")
              # Update to latest versions
              pip-compile --upgrade requirements.in
              ;;
          esac
          
          # Check if there are changes
          if ! git diff --quiet requirements.txt; then
            echo "Dependencies updated for ai-service"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No dependency updates needed for ai-service"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi
      
      - name: Install updated dependencies and run tests
        if: env.HAS_CHANGES == 'true'
        working-directory: services/ai-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          python -m pytest tests/ -v
      
      - name: Security check with safety
        if: env.HAS_CHANGES == 'true'
        working-directory: services/ai-service
        run: |
          pip install safety
          safety check -r requirements.txt
      
      - name: Create Pull Request for Python dependencies
        if: env.HAS_CHANGES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(ai-service): update Python dependencies
            
            - Update Python dependencies for ai-service
            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
            - All tests passing
            - Security scan completed
          title: "chore(ai-service): update Python dependencies"
          body: |
            ## 🐍 Python Dependency Update - AI Service
            
            This PR updates Python dependencies for the **ai-service**.
            
            ### Changes
            - **Update Type**: ${{ github.event.inputs.update_type || 'patch' }}
            - **Service**: ai-service
            - **Tests**: ✅ All tests passing
            - **Security**: ✅ Security scan completed
            
            ### Generated Files
            - `requirements.txt` - Updated dependency versions
            
            ### Review Checklist
            - [ ] Check for breaking changes in updated dependencies
            - [ ] Verify all tests are passing
            - [ ] Review security advisories for updated packages
            - [ ] Test AI functionality with new dependencies
            
            ---
            🤖 This PR was automatically generated by the dependency update workflow.
          branch: deps/python-ai-service-${{ github.run_number }}
          base: develop
          labels: |
            dependencies
            python
            ai-service
            automated
          reviewers: |
            ${{ github.repository_owner }}

  # Update Node.js Dependencies (Frontend)
  update-nodejs-dependencies:
    name: 🟢 Update Node.js Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Update Node.js dependencies
        working-directory: frontend
        run: |
          # Update dependencies based on input type
          case "${{ github.event.inputs.update_type || 'patch' }}" in
            "patch")
              # Update patch versions only
              npm update
              ;;
            "minor")
              # Update minor versions
              npx npm-check-updates -u --target minor
              npm install
              ;;
            "major"|"all")
              # Update all versions including major
              npx npm-check-updates -u
              npm install
              ;;
          esac
          
          # Check if there are changes
          if ! git diff --quiet package.json package-lock.json; then
            echo "Dependencies updated for frontend"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No dependency updates needed for frontend"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi
      
      - name: Run tests and build after dependency update
        if: env.HAS_CHANGES == 'true'
        working-directory: frontend
        run: |
          npm run lint
          npm run type-check
          npm run test
          npm run build
      
      - name: Security audit
        if: env.HAS_CHANGES == 'true'
        working-directory: frontend
        run: npm audit --audit-level moderate
      
      - name: Create Pull Request for Node.js dependencies
        if: env.HAS_CHANGES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(frontend): update Node.js dependencies
            
            - Update Node.js dependencies for frontend
            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
            - All tests passing
            - Security audit completed
          title: "chore(frontend): update Node.js dependencies"
          body: |
            ## 🟢 Node.js Dependency Update - Frontend
            
            This PR updates Node.js dependencies for the **frontend** application.
            
            ### Changes
            - **Update Type**: ${{ github.event.inputs.update_type || 'patch' }}
            - **Service**: frontend
            - **Tests**: ✅ All tests passing
            - **Build**: ✅ Build successful
            - **Security**: ✅ Security audit completed
            
            ### Generated Files
            - `package.json` - Updated dependency versions
            - `package-lock.json` - Updated dependency lock file
            
            ### Review Checklist
            - [ ] Check for breaking changes in updated dependencies
            - [ ] Verify all tests are passing
            - [ ] Test frontend functionality
            - [ ] Review security advisories for updated packages
            - [ ] Check bundle size impact
            
            ---
            🤖 This PR was automatically generated by the dependency update workflow.
          branch: deps/nodejs-frontend-${{ github.run_number }}
          base: develop
          labels: |
            dependencies
            nodejs
            frontend
            automated
          reviewers: |
            ${{ github.repository_owner }}

  # Update Docker Base Images
  update-docker-images:
    name: 🐳 Update Docker Base Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Docker base images
        run: |
          # Common base image updates
          declare -A base_images=(
            ["golang:1.21-alpine"]="golang:1.21-alpine"
            ["python:3.11-slim"]="python:3.11-slim"
            ["node:18-alpine"]="node:18-alpine"
            ["postgres:15"]="postgres:15"
            ["redis:7-alpine"]="redis:7-alpine"
          )
          
          # Find and update Dockerfiles
          for dockerfile in $(find . -name "Dockerfile*" -type f); do
            echo "Checking $dockerfile"
            for old_image in "${!base_images[@]}"; do
              new_image="${base_images[$old_image]}"
              if grep -q "$old_image" "$dockerfile"; then
                echo "Found $old_image in $dockerfile"
                # This would typically check for newer versions
                # For now, we'll just ensure consistency
              fi
            done
          done
          
          # Check if there are changes (placeholder)
          echo "HAS_CHANGES=false" >> $GITHUB_ENV
      
      - name: Create Pull Request for Docker image updates
        if: env.HAS_CHANGES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(docker): update base images
            
            - Update Docker base images across all services
            - Security patches and latest stable versions
          title: "chore(docker): update base images"
          body: |
            ## 🐳 Docker Base Image Updates
            
            This PR updates Docker base images across all services.
            
            ### Changes
            - Updated base images to latest stable versions
            - Applied security patches
            - Maintained compatibility
            
            ### Review Checklist
            - [ ] Verify all services build successfully
            - [ ] Check for breaking changes in base images
            - [ ] Test service functionality
            - [ ] Review security improvements
            
            ---
            🤖 This PR was automatically generated by the dependency update workflow.
          branch: deps/docker-images-${{ github.run_number }}
          base: develop
          labels: |
            dependencies
            docker
            automated

  # Summary Report
  dependency-summary:
    name: 📊 Dependency Update Summary
    runs-on: ubuntu-latest
    needs: [
      update-go-dependencies,
      update-python-dependencies,
      update-nodejs-dependencies,
      update-docker-images
    ]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "# 📦 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Go Services | ${{ needs.update-go-dependencies.result == 'success' && '✅ Completed' || '❌ Failed' }} | All Go microservices dependency updates |" >> $GITHUB_STEP_SUMMARY
          echo "| Python (AI) | ${{ needs.update-python-dependencies.result == 'success' && '✅ Completed' || '❌ Failed' }} | AI service Python dependency updates |" >> $GITHUB_STEP_SUMMARY
          echo "| Node.js (Frontend) | ${{ needs.update-nodejs-dependencies.result == 'success' && '✅ Completed' || '❌ Failed' }} | Frontend Node.js dependency updates |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Images | ${{ needs.update-docker-images.result == 'success' && '✅ Completed' || '❌ Failed' }} | Docker base image updates |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Update Type**: ${{ github.event.inputs.update_type || 'patch' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY